{"ast":null,"code":"var _jsxFileName = \"/home/consultor/Documentos/React 2023/3A - Alex Barreira/2\\xBA Aula/music-box/src/pages/Musicas.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport api from \"../api\"; // importando a instância do Axios de \"api.js\"\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Musicas() {\n  _s();\n  const [listaMusicas, setListaMusicas] = useState([]); // criando estado de vetor para uma lista de músicas  \n\n  useEffect(() => {\n    api.get().then(res => {\n      console.log(res.data);\n      setListaMusicas(res.data);\n      console.log(\"essa e a lista de musicas\", listaMusicas);\n    }).catch(erro => {\n      console.log(erro);\n    });\n  }, []);\n\n  // function listar() {\n  //     console.log(\"Requisição está sendo feita: \");\n\n  //     api.get()                               // invocando o método \"get\" do axios utilizando a URL base instanciada em \"api.js\"\n  //     .then((resposta) => {       // método get responde uma Promise que será resolvida, e quando obtiver uma resposta, cairá no \"then\" recebendo a resposta como parâmetro\n  //         console.log(resposta.data);   // exibindo o atributo \"data\", que possui o vetor de dados do objeto de resposta que foi recebido\n  //         setListaMusicas(resposta.data);    // utilizando o setter para alterar o valor do estado (useState) de \"musicas\"        \n  //     })\n  //     .catch((errorOcorrido) => {             // caso a requisição falhe, o \"catch\" pegará o erro, recebendo como parâmetro de uma função\n  //         console.log(errorOcorrido)          // exibindo o erro que ocorreu na requisição\n  //     });\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children:\n    // percorrendo o vetor de músicas, onde para cada objeto, retorna um elemento div que usa os atributos daquele objeto de música (id e titulo)\n    // ao utilizar um vetor para criar objetos com o \".map()\" devemos indicar qual será a chave (key) do elemento (que deve ser única), afim de identificar o elemento\n    listaMusicas.map(musica => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Nome da musica:   \", musica.nome, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 57\n      }, this), \"Nome do Artista \", musica.artista]\n    }, musica.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }, this))\n  }, void 0, false);\n}\n_s(Musicas, \"aAb4wmPF0ZvNg+6SJ1q16wT8h80=\");\n_c = Musicas;\nexport default Musicas;\nvar _c;\n$RefreshReg$(_c, \"Musicas\");","map":{"version":3,"names":["useEffect","useState","api","jsxDEV","_jsxDEV","Fragment","_Fragment","Musicas","_s","listaMusicas","setListaMusicas","get","then","res","console","log","data","catch","erro","children","map","musica","nome","fileName","_jsxFileName","lineNumber","columnNumber","artista","id","_c","$RefreshReg$"],"sources":["/home/consultor/Documentos/React 2023/3A - Alex Barreira/2º Aula/music-box/src/pages/Musicas.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport api from \"../api\"; // importando a instância do Axios de \"api.js\"\n\nfunction Musicas() {\n\n    const [listaMusicas, setListaMusicas] = useState( [] ); // criando estado de vetor para uma lista de músicas  \n\n    useEffect(() => {\n      api\n        .get()\n        .then((res) => {\n          console.log(res.data);\n          setListaMusicas(res.data);\n          console.log(\"essa e a lista de musicas\", listaMusicas);\n        })\n        .catch((erro) => {\n          console.log(erro);\n        });\n    }, []);\n\n    // function listar() {\n    //     console.log(\"Requisição está sendo feita: \");\n\n    //     api.get()                               // invocando o método \"get\" do axios utilizando a URL base instanciada em \"api.js\"\n    //     .then((resposta) => {       // método get responde uma Promise que será resolvida, e quando obtiver uma resposta, cairá no \"then\" recebendo a resposta como parâmetro\n    //         console.log(resposta.data);   // exibindo o atributo \"data\", que possui o vetor de dados do objeto de resposta que foi recebido\n    //         setListaMusicas(resposta.data);    // utilizando o setter para alterar o valor do estado (useState) de \"musicas\"        \n    //     })\n    //     .catch((errorOcorrido) => {             // caso a requisição falhe, o \"catch\" pegará o erro, recebendo como parâmetro de uma função\n    //         console.log(errorOcorrido)          // exibindo o erro que ocorreu na requisição\n    //     });\n    // }\n\n\n    return (\n        <>\n            {/* <button onClick={listar}>Listar Músicas</button> Você pode descomentar a função listar para ver o funcionamento no botão tbm */}\n\n            {\n                // percorrendo o vetor de músicas, onde para cada objeto, retorna um elemento div que usa os atributos daquele objeto de música (id e titulo)\n                // ao utilizar um vetor para criar objetos com o \".map()\" devemos indicar qual será a chave (key) do elemento (que deve ser única), afim de identificar o elemento\n                listaMusicas.map((musica) => (\n                    <div key={musica.id}>\n                      Nome da musica:   { musica.nome } <br/>\n                      Nome do Artista { musica.artista }\n                    </div>\n                ))\n            }\n            {/* \n                Documentação do \".map()\": \n                    - https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n                Por padrão, o React não consegue renderizar listas ou objetos, por isso precisamos iterá-los a fim de criar um elemento para ser renderizado;\n                \"map()\" é uma função nativa do JS, que serve para percorrer um vetor e devolver um novo vetor ao final das iterações;  \n                Utilizando o \"musicas.map\", estamos iterando cada música do estado \"musicas\";\n                A cada iteração, estamos utilizando o parâmetro \"musica\" (qualquer nome), que representa o próprio objeto de \"musica\" que está sendo iterado naquele momento;\n                Com uma função de callback (\"arrow function\" ou \"função anônima\"), podemos retornar um novo elemento JSX no lugar do objeto \"musica\" que estamos iterando no momento, para renderizá-lo na tela;\n                Exemplos:\n                    [1, 2, 3, 4].map( function (numero) {\n                        return ( <div>Eu sou o número {numero}</div> );\n                    })\n                    \n                    - No exemplo acima, temos um vetor com 4 posições que será iterado;\n                    - Para cada item do vetor, o \".map()\" retornará uma div na função anônima usada como callback;\n                    - O parâmetro \"numero\" representa o item do vetor que está sendo iterado no momento, e será utilizado no corpo da div para interpolar seu valor e exibir o número;\n            */}\n        </>\n    );\n}\n\nexport default Musicas;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,GAAG,MAAM,QAAQ,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAEf,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAE,EAAE,CAAE,CAAC,CAAC;;EAExDD,SAAS,CAAC,MAAM;IACdE,GAAG,CACAS,GAAG,EAAE,CACLC,IAAI,CAAEC,GAAG,IAAK;MACbC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,IAAI,CAAC;MACrBN,eAAe,CAACG,GAAG,CAACG,IAAI,CAAC;MACzBF,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEN,YAAY,CAAC;IACxD,CAAC,CAAC,CACDQ,KAAK,CAAEC,IAAI,IAAK;MACfJ,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,oBACId,OAAA,CAAAE,SAAA;IAAAa,QAAA;IAIQ;IACA;IACAV,YAAY,CAACW,GAAG,CAAEC,MAAM,iBACpBjB,OAAA;MAAAe,QAAA,GAAqB,oBACD,EAAEE,MAAM,CAACC,IAAI,EAAE,GAAC,eAAAlB,OAAA;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,oBACvB,EAAEL,MAAM,CAACM,OAAO;IAAA,GAFxBN,MAAM,CAACO,EAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAItB;EAAC,iBAmBP;AAEX;AAAClB,EAAA,CAhEQD,OAAO;AAAAsB,EAAA,GAAPtB,OAAO;AAkEhB,eAAeA,OAAO;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}